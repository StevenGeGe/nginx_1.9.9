#设置用户与组
user  nobody;
#设置启动子进程数
worker_processes  1;

#错误日志文件，以及日志级别
error_log  logs/error.log;
error_log  logs/error.log  notice;

#进程号保存文件
pid        logs/nginx.pid;


events {
    #每个进程可以处理的连接数，受系统文件句柄的限制
    worker_connections  5024;
}


http {
    #mime.types 为文件类型定义文件
    include       mime.types;
    #默认文件类型
    default_type  application/octet-stream;

    #使用log_format 可以自定义日志格式，名称为 main
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #创建访问日志，格式采用 main定义的格式
    #access_log  logs/access.log  main;

    #是否调用 sendfile() 进行数据复制，sendfile()复制数据是在内核级别完成的，
    #所以会比一般的read， write 更高效。
    sendfile        on;
    #开启后服务器的响应头部信息产生独立的数据包发送，即一个响应头信息一个包
    tcp_nopush     on;

    #保持连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
    keepalive_request  100;

    #启动网页压缩功能
    gzip  on;
    #容量小于1000B的内容不压缩
    gzip_min_length  1000;
    #压缩缓存的个数与数量
    gzip_buffers 16 32k;
    #指定压缩文件类型
    gzip_types text/plain application/xml;
    #压缩级别，可以是1至9之间的数字，数字越大，压缩效果越好，速度也越缓慢
    gzip_comp_level 2;
    #设置客户端请求的缓存大小
    client_body_buffer_size 128k;
    #设置客户端请求所允许的最大文件容量
    client_max_body_size 100m;
    #客户端请求的Header缓存大小
    large_client_header_buffers 4 8k;
    #启用缓冲代理功能
    proxy_buffering on;
    #从被代理服务器（真是服务器）所获取的第一部分响应数据的缓存大小
    proxy_buffer_size 8k;
    #从被代理服务器读取响应数据的缓存个数与容量
    proxy_buffers 8 128k;
    #设置缓存目录及其他缓存参数，缓存路径为/usr/local/nginx/cache, levels用来设置子目录个数，
    #  key_zone 定义缓冲名称及容量（名称为one，容量为100MB），inactive定义缓存的存活时间为1天，
    #  max_size 设置硬盘缓存容量为2GB，
    #  这里定义的缓存为one， 将在下面使用proxy_cache指令调用该缓存。
    proxy_cache_path   /usr/local/nginx/cache levels=1:2 key_zone=one:100m  inactive=1d max_size=2G
    #与后端服务器建立TCP握手的超时时间
    proxy_connect_timeout 60s;


    #设置后端服务器组，名称为servers
    upstream servers {
        #ip_hash 使用ip哈希值确保相同IP的客户端使用相同的后端服务器，
        # 不使用该参数，调度器将采用轮询的方式 进行数据转发
        ip_hash;
        # max_fails 设置连接后端服务器3次失败，则认为服务器处于无效状态，
        # fail_timeout 设置连接后端服务器超时时间为30s， weight设置权重为2
        server 192.168.0.1:80 max_fails=3 fail_timeout=30s weight=2;
        server 192.168.0.2:80 max_fails=3 fail_timeout=30s weight=2;
    }


    #使用server定义虚拟主机
    server {
        #服务器监听端口
        listen       80;
        #访问域名
        server_name  localhost;

        #编码格式， 如果网页编码与此设置不同，则将自动转码
        #charset koi8-r;

        #设置虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        #对url 进行匹配
        location / {
            #设置网页根路径，使用的是相对路径，html指的是出于nginx 安装路径下
            root   html;
            #首页文件，先找index.html, 若没有，再找index.htm
            index  index.html index.htm;
        }

        #使用错误代码对应的错误页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        # 下面三行注释表明，若用户访问URL 以php 结尾，则自动将该请求转交给
        # 127.0.0.1:80 服务器，通过proxy_pass 可以实现代理功能
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        # 拒绝所有人访问 .ht 页面
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #定义虚拟主机
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    监听TLS使用的443 端口
    #    listen       443 ssl;
    #    server_name  localhost;

    #    指定证书文件，使用相对路径证书需要存放在于nginx.conf 通目录下
    #    ssl_certificate      cert.pem;
    #    指定私钥文件，使用相对路径私钥需要存放在于nginx.conf 通目录下
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
